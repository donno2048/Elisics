<phyphox version="1.10" locale="en">
  <title>Sonar</title>
  <category>Acoustics</category>
  <icon format="base64"></icon>
  <description>
        Measures distances through echoes and the speed of sound.

        A sonar sends bursts of short sounds, which get reflected by the object you want to measure. As sound travels at a speed of approximately 340 m/s, the time until the reflection reaches the microphone of your phone can be used to calculate the distance of this object.

        This experiments generates a "chirp", sends it out through the speaker and starts a recording. A crosscorrelation of the chirp and the recorded data gives information about the timing at which echoes occur. This timing can then be multiplied with the speed of sound (and divided by 2 as the sound has to travel forth and back) and you get the distance at which the echo originated.

        However, sound usually travels in every direction. For a sonar this means, that when targeting a wall, you also get reflections from the floor, the ceiling, another wall nearby, a post and simply from every suitable "hard" surface nearby. Therefore this sonar gives you all the reflections and it is up to you to interpret the result and to figure out, which reflection corresponds to the target you intended to measure. So start with a small hard target and try to screen all other directions with some foam material. Also, this needs a quiet environment.
    </description>
  <link label="Wiki">http://phyphox.org/wiki/index.php?title=Experiment:_Sonar</link>
  <link label="Video" highlight="true">https://youtu.be/Ebj3v701HE0</link>
    <data-containers>
    <container size="48000">recording</container>
    <container init="48000">rate</container>
    <container size="9000">recording_range</container>
    <container>speedofsound</container>
    <container>targetdistance</container>
    <container size="240" static="true">chirp_t</container>
    <container size="240" static="true">chirp_f</container>
    <container size="240" static="true">chirp_temp1</container>
    <container size="240" static="true">chirp_temp2</container>
    <container size="240" static="true">chirp_temp3</container>
    <container size="240" static="true">chirp_temp4</container>
    <container size="240" static="true">chirp</container>
    <container size="240" static="true">weighted_chirp</container>
    <container size="1260" static="true">padding</container>
    <container size="1500" static="true">padded_chirp</container>
    <container size="7500" static="true">multi_chirp</container>
    <container size="1500">crosscorrelation</container>
    <container size="1500">crosscorrelation_smooth</container>
    <container size="1500">ccTemp</container>
    <container>max</container>
    <container>startthreshold</container>
    <container>t0</container>
    <container>t1</container>
    <container size="1200" static="true">count_t</container>
    <container size="1200" static="true">relative_t</container>
    <container size="1200">relative_cc</container>
    <container size="1200">distance</container>
    <container size="1200">sos</container>
    <container size="1200">weighted_cc</container>
    <container size="1">size</container>
    <container size="1">time</container>
    <container size="1200">time_line</container>
    <container size="96000">time_map</container>
    <container size="96000">distance_map</container>
    <container size="96000">weighted_map</container>
  </data-containers>
  <input>
    <audio>
      <output>recording</output>
      <output component="rate">rate</output>
    </audio>
  </input>
  <output>
    <audio>
      <input>multi_chirp</input>
    </audio>
  </output>
  <views>
    <view label="Time series">
      <graph label="Normalized history" labelX="distance" unitX="cm" labelY="time" unitY="s" labelZ="A" unitZ="a.u." aspectRatio="1" style="map" mapWidth="1200" mapColor1="000000" mapColor2="0000ff" mapColor3="00ffff" mapColor4="00ff00" mapColor5="ffff00" mapColor6="ff0000" mapColor7="ffffff" partialUpdate="true">
        <input axis="x">distance_map</input>
        <input axis="y">time_map</input>
        <input axis="z">weighted_map</input>
      </graph>
    </view>
    <view label="Echo location">
      <edit label="Speed of Sound" unit="m/s" default="340">
        <output>speedofsound</output>
      </edit>
      <graph label="Echo location" history="5" labelX="distance" unitX="cm" labelY="A" unitY="a.u.">
        <input axis="x">distance</input>
        <input axis="y">relative_cc</input>
      </graph>
      <graph label="Normalized to spherical surface" history="5" labelX="distance" unitX="cm" labelY="A" unitY="a.u.">
        <input axis="x">distance</input>
        <input axis="y">weighted_cc</input>
      </graph>
    </view>
    <view label="Speed of Sound">
      <edit label="Target distance" unit="m" default="1">
        <output>targetdistance</output>
      </edit>
      <graph label="Echo strength" history="5" labelX="Speed of Sound" unitX="m/s" labelY="A" unitY="a.u.">
        <input axis="x">sos</input>
        <input axis="y">relative_cc</input>
      </graph>
      <graph label="Normalized to spherical surface" history="5" labelX="Speed of Sound" unitX="m/s" labelY="A" unitY="a.u.">
        <input axis="x">sos</input>
        <input axis="y">weighted_cc</input>
      </graph>
    </view>
    <view label="Timing">
      <info label="On this page you just get the measured delay."/>
      <graph label="Echo strength" history="5" labelX="Delay" unitX="s" labelY="A" unitY="a.u.">
        <input axis="x">relative_t</input>
        <input axis="y">relative_cc</input>
      </graph>
      <graph label="Normalized to spherical surface" history="5" labelX="Delay" unitX="s" labelY="A" unitY="a.u.">
        <input axis="x">relative_t</input>
        <input axis="y">weighted_cc</input>
      </graph>
    </view>
    <view label="Chirp">
      <graph label="Chirp" labelX="Time" unitX="s" labelY="A" unitY="a.u.">
        <input axis="x">chirp_t</input>
        <input axis="y">weighted_chirp</input>
      </graph>
    </view>
  </views>
  <analysis sleep="0.5">
    <ramp>
      <input as="start" type="value">0</input>
      <input as="stop" type="value">0.005</input>
      <output>chirp_t</output>
    </ramp>
    <ramp>
      <input as="start" type="value">1000</input>
      <input as="stop" type="value">4000</input>
      <output>chirp_f</output>
    </ramp>
    <ramp>
      <input as="start" type="value">0</input>
      <input as="stop" type="value">3.14159</input>
      <output>chirp_temp1</output>
    </ramp>
    <sin>
      <input>chirp_temp1</input>
      <output>chirp_temp2</output>
    </sin>
    <power>
      <input as="base">chirp_temp2</input>
      <input as="exponent" type="value">0.25</input>
      <output>chirp_temp3</output>
    </power>
    <multiply>
      <input>chirp_f</input>
      <input>chirp_t</input>
      <input type="value">6.283185307</input>
      <output>chirp_temp4</output>
    </multiply>
    <sin>
      <input>chirp_temp4</input>
      <output>chirp</output>
    </sin>
    <multiply>
      <input>chirp</input>
      <input>chirp_temp3</input>
      <output>weighted_chirp</output>
    </multiply>
    <const>
      <output>padding</output>
    </const>
    <append>
      <input>weighted_chirp</input>
      <input>padding</input>
      <output>padded_chirp</output>
    </append>
    <append>
      <input>padded_chirp</input>
      <input>padded_chirp</input>
      <input>padded_chirp</input>
      <input>padded_chirp</input>
      <input>padded_chirp</input>
      <output>multi_chirp</output>
    </append>
    <!-- end chirp -->
    <!-- Relative time -->
    <ramp>
      <input as="start" type="value">96</input>
      <input as="stop" type="value">1295</input>
      <output>count_t</output>
    </ramp>
    <divide>
      <input>count_t</input>
      <input clear="false">rate</input>
      <output>relative_t</output>
    </divide>
    <!-- Estimate start point -->
    <max>
      <input as="y" clear="false">recording</input>
      <output as="max">max</output>
    </max>
    <multiply>
      <input clear="false">max</input>
      <input type="value">0.6</input>
      <output>startthreshold</output>
    </multiply>
    <threshold>
      <input as="y" clear="false">recording</input>
      <input as="threshold" clear="false">startthreshold</input>
      <output>t0</output>
    </threshold>
    <subtract>
      <input clear="false">t0</input>
      <input type="value">240</input>
      <!-- chirp -->
      <output>t1</output>
    </subtract>
    <subrange>
      <input as="from" clear="false">t1</input>
      <input as="length" type="value">9000</input>
      <!-- five chirps with padding + distance + headroom -->
      <input as="in" clear="false">recording</input>
      <output>recording_range</output>
    </subrange>
    <!-- Crosscorrelation -->
    <crosscorrelation>
      <input clear="false">recording_range</input>
      <input clear="false">multi_chirp</input>
      <output>crosscorrelation</output>
    </crosscorrelation>
    <multiply>
      <input clear="false">crosscorrelation</input>
      <input clear="false">crosscorrelation</input>
      <input type="value">1e5</input>
      <output>ccTemp</output>
    </multiply>
    <gausssmooth sigma="3">
      <input>ccTemp</input>
      <output>crosscorrelation_smooth</output>
    </gausssmooth>
    <!-- Find start and range -->
    <max>
      <input as="y" clear="false">crosscorrelation_smooth</input>
      <output as="position">t0</output>
    </max>
    <add>
      <input clear="false">t0</input>
      <input type="value">96</input>
      <!-- 2ms -->
      <output>t1</output>
    </add>
    <subrange>
      <input as="from">t1</input>
      <input as="length" type="value">1200</input>
      <!-- 25ms -->
      <input as="in" clear="false">crosscorrelation_smooth</input>
      <output>relative_cc</output>
    </subrange>
    <multiply>
      <input clear="false">relative_t</input>
      <input clear="false">speedofsound</input>
      <input type="value">50</input>
      <output>distance</output>
    </multiply>
    <divide>
      <input clear="false">targetdistance</input>
      <input>relative_t</input>
      <input type="value">0.5</input>
      <output>sos</output>
    </divide>
    <multiply>
      <input clear="false">relative_cc</input>
      <input clear="false">distance</input>
      <input clear="false">distance</input>
      <output>weighted_cc</output>
    </multiply>
    <timer>
      <output>time</output>
    </timer>
    <const>
      <input as="value">time</input>
      <input as="length" type="value">1200</input>
      <output>time_line</output>
    </const>
    <count>
      <input clear="false">crosscorrelation</input>
      <output>size</output>
    </count>
    <if equal="true">
      <input clear="false">size</input>
      <input type="value">1500</input>
      <input clear="false">time_line</input>
      <output clear="false">time_map</output>
    </if>
    <if equal="true">
      <input clear="false">size</input>
      <input type="value">1500</input>
      <input clear="false">distance</input>
      <output clear="false">distance_map</output>
    </if>
    <if equal="true">
      <input clear="false">size</input>
      <input type="value">1500</input>
      <input clear="false">weighted_cc</input>
      <output clear="false">weighted_map</output>
    </if>
  </analysis>
  <export>
    <set name="Echo location">
      <data name="Distance (cm)">distance</data>
      <data name="Crosscorrelation (a.u.)">relative_cc</data>
      <data name="Normalized CC (a.u.)">weighted_cc</data>
    </set>
    <set name="Speed of sound">
      <data name="Speed of sound (m/s)">sos</data>
      <data name="Crosscorrelation (a.u.)">relative_cc</data>
      <data name="Normalized CC (a.u.)">weighted_cc</data>
    </set>
    <set name="Time">
      <data name="Delay (s)">relative_t</data>
      <data name="Crosscorrelation (a.u.)">relative_cc</data>
      <data name="Normalized CC (a.u.)">weighted_cc</data>
    </set>
    <set name="Chirp">
      <data name="Time (s)">chirp_t</data>
      <data name="Amplitude (a.u.)">weighted_chirp</data>
    </set>
  </export>
</phyphox>
